name: Build Kairos Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packer/kairos.pkr.hcl'
      - 'packer/kairos/**'
      - 'scripts/kairos/**'
      - '.github/workflows/build-kairos.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packer/kairos.pkr.hcl'
      - 'packer/kairos/**'
      - 'scripts/kairos/**'
      - '.github/workflows/build-kairos.yml'
  workflow_dispatch:
    inputs:
      kairos_version:
        description: 'Kairos version to build'
        required: false
        default: 'v3.2.0'
        type: string
      build_iso:
        description: 'Build bootable ISO (requires KVM)'
        required: false
        default: false
        type: boolean

env:
  KAIROS_VERSION: ${{ inputs.kairos_version || 'v3.2.0' }}
  PACKER_VERSION: '1.10.1'

jobs:
  # Validate Packer configuration
  validate:
    name: Validate Packer Configuration
    runs-on: ubuntu-latest
    
    # Set minimal required permissions for security
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      # Cache Packer plugins to speed up subsequent runs
      - name: Cache Packer Plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.packer.d/plugins
            ~/.config/packer/plugins
          key: ${{ runner.os }}-packer-plugins-kairos-${{ hashFiles('packer/kairos.pkr.hcl') }}
          restore-keys: |
            ${{ runner.os }}-packer-plugins-kairos-
            ${{ runner.os }}-packer-plugins-

      # Debug workflow environment
      - name: Debug Environment
        run: |
          echo "=== DEBUGGING WORKFLOW ENVIRONMENT ==="
          echo "Repository root directory: $(pwd)"
          echo "Contents of repository root:"
          ls -la
          echo "Packer version: $(packer version)"
          echo "Which packer: $(which packer)"
          echo "Checking if packer directory exists:"
          ls -la packer/ || echo "No packer directory found"

      # Initialize Packer plugins and validate configuration
      - name: Packer Init and Validate
        working-directory: packer
        run: |
          echo "=== PACKER INITIALIZATION AND VALIDATION ==="
          echo "Current directory: $(pwd)"
          echo "Packer version: $(packer version)"
          
          echo "Contents of packer directory:"
          ls -la
          
          echo "Contents of Kairos Packer configuration file:"
          cat kairos.pkr.hcl | head -30
          
          echo "Running packer init with maximum verbosity..."
          PACKER_LOG=1 PACKER_LOG_PATH=./packer.log packer init kairos.pkr.hcl || {
            echo "❌ Packer init failed, showing log:"
            cat ./packer.log 2>/dev/null || echo "No log file found"
            echo "Attempting manual plugin installation..."
            packer plugins install github.com/hashicorp/docker
            packer plugins install github.com/hashicorp/qemu
            exit 1
          }
          
          echo "✅ Packer init completed successfully!"
          echo "Checking plugin installation locations..."
          
          # Check various plugin locations
          for dir in ~/.packer.d ~/.config/packer; do
            if [ -d "$dir" ]; then
              echo "Found directory: $dir"
              find "$dir" -name "*" -type f 2>/dev/null | head -10
            fi
          done
          
          echo "=== RUNNING VALIDATION ==="
          echo "Current working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la *.pkr.hcl
          
          if packer validate kairos.pkr.hcl; then
            echo "✅ Packer validation successful!"
          else
            echo "❌ Packer validation failed"
            echo "Debugging information:"
            echo "Plugin status:"
            find ~/.packer.d -name "*" 2>/dev/null || echo "No ~/.packer.d found"
            find ~/.config/packer -name "*" 2>/dev/null || echo "No ~/.config/packer found"
            exit 1
          fi

      - name: Format check Packer template
        working-directory: packer
        run: |
          echo "=== RUNNING FORMAT CHECK ==="
          if packer fmt -check kairos.pkr.hcl; then
            echo "✅ Packer format check successful!"
          else
            echo "❌ Packer format check failed"
            echo "Run 'packer fmt kairos.pkr.hcl' to fix formatting"
            exit 1
          fi

  # Build custom Kairos container image
  build-container:
    name: Build Kairos Container Image
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        base_distribution: ['ubuntu-24.04']
        k8s_distribution: ['k3s']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      # Cache Packer plugins for build jobs
      - name: Cache Packer Plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.packer.d/plugins
            ~/.config/packer/plugins
          key: ${{ runner.os }}-packer-plugins-kairos-${{ hashFiles('packer/kairos.pkr.hcl') }}
          restore-keys: |
            ${{ runner.os }}-packer-plugins-kairos-
            ${{ runner.os }}-packer-plugins-

      - name: Initialize Packer
        working-directory: packer
        run: |
          echo "=== INITIALIZING PACKER FOR BUILD ==="
          echo "Current directory: $(pwd)"
          echo "Packer version: $(packer version)"
          
          PACKER_LOG=1 PACKER_LOG_PATH=./packer-build.log packer init kairos.pkr.hcl || {
            echo "❌ Packer init failed, showing log:"
            cat ./packer-build.log 2>/dev/null || echo "No log file found"
            exit 1
          }
          echo "✅ Packer init completed successfully!"

      - name: Build custom Kairos container image
        working-directory: packer
        run: |
          echo "=== STARTING KAIROS CONTAINER BUILD ==="
          echo "Build parameters:"
          echo "  - Base distribution: ${{ matrix.base_distribution }}"
          echo "  - K8s distribution: ${{ matrix.k8s_distribution }}"
          echo "  - Kairos version: ${{ env.KAIROS_VERSION }}"
          
          packer build \
            -only='kairos-container-build' \
            -var="base_distribution=${{ matrix.base_distribution }}" \
            -var="k8s_distribution=${{ matrix.k8s_distribution }}" \
            -var="kairos_version=${{ env.KAIROS_VERSION }}" \
            kairos.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Export container image
        run: |
          docker save custom-kairos-base:latest | gzip > kairos-container-${{ matrix.base_distribution }}-${{ matrix.k8s_distribution }}.tar.gz

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'custom-kairos-base:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload container image artifact
        uses: actions/upload-artifact@v4
        with:
          name: kairos-container-${{ matrix.base_distribution }}-${{ matrix.k8s_distribution }}
          path: kairos-container-*.tar.gz
          retention-days: 30

  # Build bootable ISO (only on workflow_dispatch with iso flag or main branch)
  build-iso:
    name: Build Kairos Bootable ISO
    runs-on: ubuntu-latest
    needs: [validate, build-container]
    if: ${{ (github.event_name == 'workflow_dispatch' && inputs.build_iso) || (github.ref == 'refs/heads/main' && github.event_name == 'push') }}
    strategy:
      matrix:
        base_distribution: ['ubuntu-24.04']
        k8s_distribution: ['k3s']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Download container image artifact
        uses: actions/download-artifact@v4
        with:
          name: kairos-container-${{ matrix.base_distribution }}-${{ matrix.k8s_distribution }}

      - name: Load container image
        run: |
          gunzip -c kairos-container-*.tar.gz | docker load

      # Cache Packer plugins for ISO build
      - name: Cache Packer Plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.packer.d/plugins
            ~/.config/packer/plugins
          key: ${{ runner.os }}-packer-plugins-kairos-${{ hashFiles('packer/kairos.pkr.hcl') }}
          restore-keys: |
            ${{ runner.os }}-packer-plugins-kairos-
            ${{ runner.os }}-packer-plugins-

      - name: Initialize Packer
        working-directory: packer
        run: |
          echo "=== INITIALIZING PACKER FOR ISO BUILD ==="
          echo "Current directory: $(pwd)"
          echo "Packer version: $(packer version)"
          
          PACKER_LOG=1 PACKER_LOG_PATH=./packer-iso.log packer init kairos.pkr.hcl || {
            echo "❌ Packer init failed, showing log:"
            cat ./packer-iso.log 2>/dev/null || echo "No log file found"
            exit 1
          }
          echo "✅ Packer init completed successfully!"

      - name: Build Kairos bootable ISO
        working-directory: packer
        run: |
          echo "=== STARTING KAIROS ISO BUILD ==="
          echo "Build parameters:"
          echo "  - Base distribution: ${{ matrix.base_distribution }}"
          echo "  - K8s distribution: ${{ matrix.k8s_distribution }}"
          echo "  - Kairos version: ${{ env.KAIROS_VERSION }}"
          echo "  - Memory: 4096 MB"
          echo "  - CPUs: 4"
          
          packer build \
            -only='kairos-iso-build' \
            -var="base_distribution=${{ matrix.base_distribution }}" \
            -var="k8s_distribution=${{ matrix.k8s_distribution }}" \
            -var="kairos_version=${{ env.KAIROS_VERSION }}" \
            -var="memory=4096" \
            -var="cpus=4" \
            kairos.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: kairos-iso-${{ matrix.base_distribution }}-${{ matrix.k8s_distribution }}
          path: packer/output-kairos/*
          retention-days: 30

  # Create release on main branch
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-container, build-iso]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release tag
        id: tag
        run: |
          TAG="kairos-${{ env.KAIROS_VERSION }}-$(date +'%Y%m%d-%H%M%S')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Kairos Images ${{ steps.tag.outputs.tag }}
          body: |
            ## Kairos Custom Images Release
            
            This release contains custom Kairos images built with enterprise configuration:
            
            ### Images Included:
            - **Container Images**: Custom Kairos base images
            - **Bootable ISOs**: Ready-to-deploy Kairos ISO images
            
            ### Configuration:
            - Kairos Version: ${{ env.KAIROS_VERSION }}
            - Base Distribution: Ubuntu 24.04
            - Kubernetes: K3s with HA configuration
            - Enterprise Features: Enabled
            
            ### Security:
            - All images have been scanned with Trivy
            - Security hardening applied
            - Enterprise compliance markers included
            
            Built from commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: kairos-images-${{ steps.tag.outputs.tag }}
          asset_content_type: application/zip