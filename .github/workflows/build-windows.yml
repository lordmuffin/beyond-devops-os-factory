name: Build Custom Windows Image

# Trigger the workflow on push to main branch when specific directories change
# or allow manual workflow dispatch
on:
  push:
    branches: [main]
    paths:
      - 'packer/**'
      - 'scripts/**'
      - 'ansible/**'
  workflow_dispatch:

# Ensure only one build runs per branch at a time
# Cancel any in-progress runs when a new one starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Windows Image via QEMU
    runs-on: ubuntu-latest
    
    # Set minimal required permissions for security
    permissions:
      contents: read

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup QEMU/KVM virtualization environment
      # Install necessary packages for running virtualized Windows builds
      - name: Setup QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils \
            cpu-checker
          
          # Enable KVM acceleration if available
          sudo modprobe kvm
          sudo chmod 666 /dev/kvm || echo "KVM not available, falling back to software emulation"
          
          # Verify QEMU installation
          qemu-system-x86_64 --version

      # Step 3: Install HashiCorp Packer
      - name: Setup Packer
        uses: hashicorp/setup-packer@main

      # Step 3.5: Install Ansible (required by Packer Ansible provisioner)
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version

      # Step 4: Cache Packer plugins to speed up subsequent runs
      # This prevents re-downloading plugins on every workflow run
      - name: Cache Packer Plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.packer.d/plugins
            ~/.config/packer/plugins
          key: ${{ runner.os }}-packer-plugins-${{ hashFiles('packer/*.pkr.hcl') }}
          restore-keys: |
            ${{ runner.os }}-packer-plugins-

      # Step 5: Initialize Packer and install required plugins
      - name: Packer Init
        run: |
          echo "Initializing Packer plugins..."
          echo "Current directory: $(pwd)"
          echo "Packer version: $(packer version)"
          
          cd packer
          echo "Changed to directory: $(pwd)"
          echo "Contents of packer directory:"
          ls -la
          
          echo "Contents of Packer configuration file:"
          cat windows_11_pro.pkr.hcl | head -20
          
          echo "Running packer init with maximum verbosity..."
          PACKER_LOG=1 PACKER_LOG_PATH=./packer.log packer init . || {
            echo "Packer init failed, showing log:"
            cat ./packer.log 2>/dev/null || echo "No log file found"
            exit 1
          }
          
          echo "Packer init completed successfully!"
          echo "Checking plugin installation locations..."
          
          # Check various plugin locations
          for dir in ~/.packer.d ~/.config/packer; do
            if [ -d "$dir" ]; then
              echo "Found directory: $dir"
              find "$dir" -name "*" -type f 2>/dev/null | head -10
            fi
          done
          
          echo "Attempting immediate validation after init..."
          packer validate . && echo "✅ Validation successful after init" || echo "❌ Validation still fails"

      # Step 6: Validate Packer configuration for syntax errors
      - name: Packer Validate
        working-directory: packer
        run: |
          echo "=== VALIDATION STEP ==="
          echo "Current directory: $(pwd)"
          echo "Packer version: $(packer version)"
          echo "Environment variables:"
          env | grep -E "(PACKER|HOME)" || echo "No packer env vars"
          
          echo "Checking for plugins again:"
          ls -la ~/.packer.d/plugins/ 2>/dev/null || echo "No ~/.packer.d/plugins found"
          
          echo "Attempting validation:"
          packer validate .
          echo "Packer validation completed successfully"

      # Step 7: Build the Windows image
      # Note: Any secrets (API keys, passwords, etc.) should be passed via env block
      # Example: env:
      #   PACKER_VAR_windows_password: ${{ secrets.WINDOWS_PASSWORD }}
      #   PACKER_VAR_api_key: ${{ secrets.HYPERVISOR_API_KEY }}
      - name: Packer Build
        working-directory: packer
        run: |
          echo "Starting Packer build..."
          packer build .
        env:
          # Add any required environment variables or secrets here
          PACKER_LOG: 1
          # Example secret usage (uncomment and configure as needed):
          # PACKER_VAR_windows_password: ${{ secrets.WINDOWS_PASSWORD }}

      # Step 8: Upload the built image as a workflow artifact
      # This allows downloading the image after the workflow completes
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-image
          path: packer/output-windows-custom/
          # Keep artifacts for 30 days (adjust as needed)
          retention-days: 30
        # Only upload if build was successful
        if: success()