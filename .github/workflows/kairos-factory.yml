name: Build Kairos Images with Factory Action

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packer/kairos/**'
      - 'scripts/kairos/**'
      - '.github/workflows/kairos-factory.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packer/kairos/**'
      - 'scripts/kairos/**'
      - '.github/workflows/kairos-factory.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version to build'
        required: false
        default: '1.0.0'
        type: string
      base_image:
        description: 'Base image (ubuntu:22.04, ubuntu:24.04, etc.)'
        required: false
        default: 'ubuntu:22.04'
        type: string
      arch:
        description: 'Target architecture'
        required: false
        default: 'amd64'
        type: choice
        options:
          - 'amd64'
          - 'arm64'

env:
  VERSION: ${{ inputs.version || '1.0.0' }}
  BASE_IMAGE: ${{ inputs.base_image || 'ubuntu:22.04' }}
  ARCH: ${{ inputs.arch || 'amd64' }}

jobs:
  generate-version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag detection
          
      - name: Generate version from git tag
        id: version
        run: |
          # For manual workflow dispatch, use input version if provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_RELEASE="true"
            echo "Using manual version: $VERSION"
          elif git describe --tags --exact-match HEAD 2>/dev/null; then
            # This is a tagged commit - use the tag as version
            VERSION=$(git describe --tags --exact-match HEAD | sed 's/^v//')
            IS_RELEASE="true"
            echo "Using git tag version: $VERSION"
          else
            # This is not a tagged commit - generate development version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
            COMMIT_COUNT=$(git rev-list --count HEAD)
            # Extract base version and increment patch for development
            BASE_VERSION="${LATEST_TAG#v}"
            IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]:-0}
            # Increment patch and add development suffix
            NEW_PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-alpha.${COMMIT_COUNT}"
            IS_RELEASE="false"
            echo "Generated development version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION (release: $IS_RELEASE)"

  build-iso:
    name: Build Kairos ISO
    needs: generate-version
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@v0.0.4
    permissions:
      contents: write
      security-events: write
      id-token: write
      actions: read
      packages: write
    with:
      version: ${{ needs.generate-version.outputs.version }}
      base_image: ${{ github.event.inputs.base_image || 'ubuntu:22.04' }}
      model: "generic"
      iso: true
      arch: ${{ github.event.inputs.arch || 'amd64' }}
      kubernetes_distro: "k3s"
      security_checks: "grype,trivy"
      
  build-raw:
    name: Build Kairos RAW
    needs: generate-version
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@v0.0.4
    permissions:
      contents: write
      security-events: write
      id-token: write
      actions: read
      packages: write
    with:
      version: ${{ needs.generate-version.outputs.version }}
      base_image: ${{ github.event.inputs.base_image || 'ubuntu:22.04' }}
      model: "generic"
      raw: true
      arch: ${{ github.event.inputs.arch || 'amd64' }}
      kubernetes_distro: "k3s"
      security_checks: "grype,trivy"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [generate-version, build-iso, build-raw]
    if: needs.generate-version.outputs.is_release == 'true' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate release tag
        id: tag
        run: |
          VERSION="${{ needs.generate-version.outputs.version }}"
          if [[ "$VERSION" == *"-alpha."* ]]; then
            # Development version - use timestamp for uniqueness
            TAG="kairos-dev-${VERSION}-$(date +'%Y%m%d-%H%M%S')"
          else
            # Release version - use clean semantic version
            TAG="v${VERSION}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated release tag: $TAG"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Kairos Factory Images ${{ steps.tag.outputs.tag }}
          body: |
            ## Kairos Factory Images Release
            
            Built using Kairos Factory Action with enterprise configuration.
            
            ### Images Included:
            - **ISO Images**: Ready-to-boot Kairos ISO images
            - **RAW Images**: Raw disk images for virtualization
            
            ### Configuration:
            - Version: ${{ needs.generate-version.outputs.version }}
            - Base Image: ${{ github.event.inputs.base_image || 'ubuntu:22.04' }}
            - Architecture: ${{ github.event.inputs.arch || 'amd64' }}
            - Kubernetes: K3s with enterprise configuration
            - Security: Vulnerability scanning enabled
            - Release Type: ${{ needs.generate-version.outputs.is_release == 'true' && 'Official Release' || 'Development Build' }}
            
            Built from commit: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}